[{"C:\\Projects\\github\\harutinAsrian\\tasku\\src\\App.tsx":"1","C:\\Projects\\github\\harutinAsrian\\tasku\\src\\components\\login\\login.component.tsx":"2","C:\\Projects\\github\\harutinAsrian\\tasku\\src\\index.tsx":"3","C:\\Projects\\github\\harutinAsrian\\tasku\\src\\pages\\home.page.tsx":"4","C:\\Projects\\github\\harutinAsrian\\tasku\\src\\pages\\about.page.tsx":"5","C:\\Projects\\github\\harutinAsrian\\tasku\\src\\pages\\index.ts":"6","C:\\Projects\\github\\harutinAsrian\\tasku\\src\\components\\header\\header.component.tsx":"7","C:\\Projects\\github\\harutinAsrian\\tasku\\src\\services\\auth.service.ts":"8","C:\\Projects\\github\\harutinAsrian\\tasku\\src\\store\\index.ts":"9","C:\\Projects\\github\\harutinAsrian\\tasku\\src\\utils\\testUtils\\testDatabase.ts":"10","C:\\Projects\\github\\harutinAsrian\\tasku\\src\\hooks\\useServices.ts":"11","C:\\Projects\\github\\harutinAsrian\\tasku\\src\\store\\createServices.ts":"12","C:\\Projects\\github\\harutinAsrian\\tasku\\src\\utils\\testUtils\\repository\\index.ts":"13","C:\\Projects\\github\\harutinAsrian\\tasku\\src\\utils\\testUtils\\testServiceStore.ts":"14","C:\\Projects\\github\\harutinAsrian\\tasku\\src\\utils\\testUtils\\repository\\repository.ts":"15"},{"size":1062,"mtime":1607872860018,"results":"16","hashOfConfig":"17"},{"size":2700,"mtime":1608252896875,"results":"18","hashOfConfig":"17"},{"size":517,"mtime":1607792342441,"results":"19","hashOfConfig":"17"},{"size":228,"mtime":1607845037304,"results":"20","hashOfConfig":"17"},{"size":155,"mtime":1607844356685,"results":"21","hashOfConfig":"17"},{"size":82,"mtime":1607844657871,"results":"22","hashOfConfig":"17"},{"size":1604,"mtime":1607871167399,"results":"23","hashOfConfig":"17"},{"size":186,"mtime":1607876451239,"results":"24","hashOfConfig":"17"},{"size":441,"mtime":1607872764437,"results":"25","hashOfConfig":"17"},{"size":403,"mtime":1608221122514,"results":"26","hashOfConfig":"17"},{"size":202,"mtime":1607872825369,"results":"27","hashOfConfig":"17"},{"size":211,"mtime":1607872352429,"results":"28","hashOfConfig":"17"},{"size":72,"mtime":1608198205803,"results":"29","hashOfConfig":"17"},{"size":1885,"mtime":1608221240206,"results":"30","hashOfConfig":"17"},{"size":2369,"mtime":1608221358058,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r3iy8c",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Projects\\github\\harutinAsrian\\tasku\\src\\App.tsx",[],"C:\\Projects\\github\\harutinAsrian\\tasku\\src\\components\\login\\login.component.tsx",[],"C:\\Projects\\github\\harutinAsrian\\tasku\\src\\index.tsx",[],["64","65"],"C:\\Projects\\github\\harutinAsrian\\tasku\\src\\pages\\home.page.tsx",[],"C:\\Projects\\github\\harutinAsrian\\tasku\\src\\pages\\about.page.tsx",[],"C:\\Projects\\github\\harutinAsrian\\tasku\\src\\pages\\index.ts",[],"C:\\Projects\\github\\harutinAsrian\\tasku\\src\\components\\header\\header.component.tsx",[],"C:\\Projects\\github\\harutinAsrian\\tasku\\src\\services\\auth.service.ts",[],"C:\\Projects\\github\\harutinAsrian\\tasku\\src\\store\\index.ts",[],"C:\\Projects\\github\\harutinAsrian\\tasku\\src\\utils\\testUtils\\testDatabase.ts",[],"C:\\Projects\\github\\harutinAsrian\\tasku\\src\\hooks\\useServices.ts",[],"C:\\Projects\\github\\harutinAsrian\\tasku\\src\\store\\createServices.ts",[],"C:\\Projects\\github\\harutinAsrian\\tasku\\src\\utils\\testUtils\\repository\\index.ts",[],"C:\\Projects\\github\\harutinAsrian\\tasku\\src\\utils\\testUtils\\testServiceStore.ts",["66"],"import { AppResponse, IAuthService, LoginInput, LoginOutput } from \"../../services/interfaces\";\r\nimport { ServiceStore } from \"../../store/servicesStore\";\r\nimport { DT_User, Repository } from \"./repository\";\r\nimport { resolveTestDatabase } from \"./testDatabase\";\r\n\r\n// use test data for test services\r\nexport class TestAuthService implements IAuthService {\r\n\r\n    constructor(\r\n        private readonly usersRepo: Repository<DT_User>\r\n    ) {\r\n\r\n    }\r\n\r\n    async login(input: LoginInput): Promise<AppResponse<LoginOutput>> {\r\n        try {\r\n            const user = await this.usersRepo.findOne(x => x.username == input.username);\r\n            if (!user) return {\r\n                success: false,\r\n                error: {\r\n                    type: 'form',\r\n                    formErrors: { 'username': 'User not found.' }\r\n                }\r\n            }\r\n\r\n            if (user.password !== input.password) {\r\n                return {\r\n                    success: false,\r\n                    error: {\r\n                        type: 'form',\r\n                        formErrors: { 'password': 'Invalid password.' }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return {\r\n                success: true,\r\n                data: {\r\n                    token: 'test_auth_token',\r\n                    userInfo: {\r\n                        username: user.username,\r\n                        id: user.id\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (err) {\r\n            return {\r\n                success: false,\r\n                error: { type: 'message', message: 'Unhandled error' }\r\n            };\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const createTestServiceStore = (): ServiceStore => {\r\n    const database = resolveTestDatabase();\r\n    return {\r\n        authService: new TestAuthService(new Repository(database.users))\r\n    };\r\n};\r\n","C:\\Projects\\github\\harutinAsrian\\tasku\\src\\utils\\testUtils\\repository\\repository.ts",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":17,"column":71,"nodeType":"73","messageId":"74","endLine":17,"endColumn":73},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]